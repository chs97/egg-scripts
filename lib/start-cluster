#!/usr/bin/env node

'use strict';

const cluster = require('cluster')
const ipc = require('node-ipc')
const helper = require('./helper')
const options = JSON.parse(process.argv[2]);

if (cluster.isMaster) {
  const { title } = options
  ipc.config.id = 'egg-master-ipc-process-' + title
  ipc.config.retry = 1000
  ipc.config.silent = true
  console.log(ipc.config.id)
  ipc.serve(() => ipc.server.on(helper.constants.RELOAD_MESSAGE, async () => {
    console.log('server start and listen ' + helper.constants.RELOAD_MESSAGE)
    const oldWorkers = cluster.workers
    const newWorkers = []
    let hasConnects = 0
    let forkCount = 0
    cluster.on('fork', (worker) => {
      forkCount ++
      newWorkers.push(worker)
      console.log('fork new worker: %s', worker.process.pid)
    })
    cluster.on('exit', (worker) => {
      if (newWorkers.includes(worker)) {
        console.log('exit worker')
      }
    })
    cluster.on('listening', (worker) => {
      if (newWorkers.includes(worker)) {
        hasConnects++
      }
      if (hasConnects === newWorkers.length) {
        killOldWorkers()
      }
    })
    for(const id in oldWorkers) {
      const worker = oldWorkers[id]
      // cfork special prop: _clusterSettings
      const newWorker = cluster.fork(worker._clusterSettings)
      newWorker._clusterSettings = worker._clusterSettings
    }
    async function killOldWorkers() {
      console.log('disconnect all')
    }
  }))
  ipc.server.start()
}
require(options.framework).startCluster(options);